type Aboutpage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  MissionText: String
  BannerText: String
  OurApproachText: String
}

input AboutpageInput {
  MissionText: String
  BannerText: String
  OurApproachText: String
}

type Contact {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Longitude: Float
  Latitude: Float
  Title: String
  Address: String
  Website: String
  Email: String
}

input ContactInput {
  Longitude: Float
  Latitude: Float
  Title: String
  Address: String
  Website: String
  Email: String
}

input createAboutpageInput {
  data: AboutpageInput
}

type createAboutpagePayload {
  aboutpage: Aboutpage
}

input createContactInput {
  data: ContactInput
}

type createContactPayload {
  contact: Contact
}

input createGeneralsettingsInput {
  data: GeneralsettingsInput
}

type createGeneralsettingsPayload {
  generalsetting: Generalsettings
}

input createGoalsandvalueInput {
  data: GoalsandvalueInput
}

type createGoalsandvaluePayload {
  goalsandvalue: Goalsandvalue
}

input createGrouppageInput {
  data: GrouppageInput
}

type createGrouppagePayload {
  grouppage: Grouppage
}

input createHomepageInput {
  data: HomepageInput
}

type createHomepagePayload {
  homepage: Homepage
}

input createPartnerInput {
  data: PartnerInput
}

input createPartnerpageInput {
  data: PartnerpageInput
}

type createPartnerpagePayload {
  partnerpage: Partnerpage
}

type createPartnerPayload {
  partner: Partner
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTeammemberInput {
  data: TeammemberInput
}

type createTeammemberPayload {
  teammember: Teammember
}

input createTeampageInput {
  data: TeampageInput
}

type createTeampagePayload {
  teampage: Teampage
}

input createTechnicalpageInput {
  data: TechnicalpageInput
}

type createTechnicalpagePayload {
  technicalpage: Technicalpage
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteAboutpageInput {
  where: InputID
}

type deleteAboutpagePayload {
  aboutpage: Aboutpage
}

input deleteContactInput {
  where: InputID
}

type deleteContactPayload {
  contact: Contact
}

input deleteGeneralsettingsInput {
  where: InputID
}

type deleteGeneralsettingsPayload {
  generalsetting: Generalsettings
}

input deleteGoalsandvalueInput {
  where: InputID
}

type deleteGoalsandvaluePayload {
  goalsandvalue: Goalsandvalue
}

input deleteGrouppageInput {
  where: InputID
}

type deleteGrouppagePayload {
  grouppage: Grouppage
}

input deleteHomepageInput {
  where: InputID
}

type deleteHomepagePayload {
  homepage: Homepage
}

input deletePartnerInput {
  where: InputID
}

input deletePartnerpageInput {
  where: InputID
}

type deletePartnerpagePayload {
  partnerpage: Partnerpage
}

type deletePartnerPayload {
  partner: Partner
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTeammemberInput {
  where: InputID
}

type deleteTeammemberPayload {
  teammember: Teammember
}

input deleteTeampageInput {
  where: InputID
}

type deleteTeampagePayload {
  teampage: Teampage
}

input deleteTechnicalpageInput {
  where: InputID
}

type deleteTechnicalpagePayload {
  technicalpage: Technicalpage
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAboutpageInput {
  MissionText: String
  BannerText: String
  OurApproachText: String
}

input editContactInput {
  Longitude: Float
  Latitude: Float
  Title: String
  Address: String
  Website: String
  Email: String
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editGeneralsettingsInput {
  LogoColor: ID
  LogoWhite: ID
  LogoDark: ID
  TwitterURL: String
  LinkedInURL: String
}

input editGoalsandvalueInput {
  Title: String
  Content: String
  Image: ID
}

input editGrouppageInput {
  IntroText: String
  ParticipantMediaText: String
  ParticipantMediaURL: String
  ParticipantMediaLogo: ID
  SkollFoundationText: String
  SkollFoundationURL: String
  SkollFoundationLogo: ID
  SkollWorldText: String
  SkollWorldURL: String
  SkollWorldLogo: ID
}

input editHomepageInput {
  HomeMessageText: String
  DesktopVideoCover: ID
  LogoVersion: ENUM_HOMEPAGE_LOGOVERSION
  MobileImageCover: ID
  MissionText: String
  OurApproachText: String
  JeffSkollGroupText: String
  NetworkPartnersText: String
  InvestmentPartnersText: String
}

input editPartnerInput {
  Name: String
  Website: String
  PartnerType: ENUM_PARTNER_PARTNERTYPE
  Image: ID
}

input editPartnerpageInput {
  NetworkPartnersText: String
  InvestmentPartnersText: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTeammemberInput {
  Avatar: ID
  Name: String
  Title: String
  LinkedIn: String
  Bio: String
  Team: ENUM_TEAMMEMBER_TEAM
}

input editTeampageInput {
  BannerImage: ID
}

input editTechnicalpageInput {
  TermsOfUse: String
  Disclosures: String
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_HOMEPAGE_LOGOVERSION {
  Color
  White
  Dark
}

enum ENUM_PARTNER_PARTNERTYPE {
  none
  NetworkOfPartners
  SustainableInvestmentPartners
}

enum ENUM_TEAMMEMBER_TEAM {
  none
  Investment
  Operations
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Generalsettings {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  LogoColor: UploadFile
  LogoWhite: UploadFile
  LogoDark: UploadFile
  TwitterURL: String
  LinkedInURL: String
}

input GeneralsettingsInput {
  LogoColor: ID
  LogoWhite: ID
  LogoDark: ID
  TwitterURL: String
  LinkedInURL: String
}

type Goalsandvalue {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Content: String
  Image: UploadFile
}

input GoalsandvalueInput {
  Title: String
  Content: String
  Image: ID
}

type Grouppage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  IntroText: String
  ParticipantMediaText: String
  ParticipantMediaURL: String
  ParticipantMediaLogo: UploadFile
  SkollFoundationText: String
  SkollFoundationURL: String
  SkollFoundationLogo: UploadFile
  SkollWorldText: String
  SkollWorldURL: String
  SkollWorldLogo: UploadFile
}

input GrouppageInput {
  IntroText: String
  ParticipantMediaText: String
  ParticipantMediaURL: String
  ParticipantMediaLogo: ID
  SkollFoundationText: String
  SkollFoundationURL: String
  SkollFoundationLogo: ID
  SkollWorldText: String
  SkollWorldURL: String
  SkollWorldLogo: ID
}

type Homepage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  HomeMessageText: String
  DesktopVideoCover: UploadFile
  LogoVersion: ENUM_HOMEPAGE_LOGOVERSION
  MobileImageCover: UploadFile
  MissionText: String
  OurApproachText: String
  JeffSkollGroupText: String
  NetworkPartnersText: String
  InvestmentPartnersText: String
}

input HomepageInput {
  HomeMessageText: String
  DesktopVideoCover: ID
  LogoVersion: ENUM_HOMEPAGE_LOGOVERSION
  MobileImageCover: ID
  MissionText: String
  OurApproachText: String
  JeffSkollGroupText: String
  NetworkPartnersText: String
  InvestmentPartnersText: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Aboutpage | createAboutpagePayload | updateAboutpagePayload | deleteAboutpagePayload | Contact | createContactPayload | updateContactPayload | deleteContactPayload | Generalsettings | createGeneralsettingsPayload | updateGeneralsettingsPayload | deleteGeneralsettingsPayload | Goalsandvalue | createGoalsandvaluePayload | updateGoalsandvaluePayload | deleteGoalsandvaluePayload | Grouppage | createGrouppagePayload | updateGrouppagePayload | deleteGrouppagePayload | Homepage | createHomepagePayload | updateHomepagePayload | deleteHomepagePayload | Partner | createPartnerPayload | updatePartnerPayload | deletePartnerPayload | Partnerpage | createPartnerpagePayload | updatePartnerpagePayload | deletePartnerpagePayload | Teammember | createTeammemberPayload | updateTeammemberPayload | deleteTeammemberPayload | Teampage | createTeampagePayload | updateTeampagePayload | deleteTeampagePayload | Technicalpage | createTechnicalpagePayload | updateTechnicalpagePayload | deleteTechnicalpagePayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createAboutpage(input: createAboutpageInput): createAboutpagePayload
  updateAboutpage(input: updateAboutpageInput): updateAboutpagePayload
  deleteAboutpage(input: deleteAboutpageInput): deleteAboutpagePayload
  createContact(input: createContactInput): createContactPayload
  updateContact(input: updateContactInput): updateContactPayload
  deleteContact(input: deleteContactInput): deleteContactPayload
  createGeneralsettings(input: createGeneralsettingsInput): createGeneralsettingsPayload
  updateGeneralsettings(input: updateGeneralsettingsInput): updateGeneralsettingsPayload
  deleteGeneralsettings(input: deleteGeneralsettingsInput): deleteGeneralsettingsPayload
  createGoalsandvalue(input: createGoalsandvalueInput): createGoalsandvaluePayload
  updateGoalsandvalue(input: updateGoalsandvalueInput): updateGoalsandvaluePayload
  deleteGoalsandvalue(input: deleteGoalsandvalueInput): deleteGoalsandvaluePayload
  createGrouppage(input: createGrouppageInput): createGrouppagePayload
  updateGrouppage(input: updateGrouppageInput): updateGrouppagePayload
  deleteGrouppage(input: deleteGrouppageInput): deleteGrouppagePayload
  createHomepage(input: createHomepageInput): createHomepagePayload
  updateHomepage(input: updateHomepageInput): updateHomepagePayload
  deleteHomepage(input: deleteHomepageInput): deleteHomepagePayload
  createPartner(input: createPartnerInput): createPartnerPayload
  updatePartner(input: updatePartnerInput): updatePartnerPayload
  deletePartner(input: deletePartnerInput): deletePartnerPayload
  createPartnerpage(input: createPartnerpageInput): createPartnerpagePayload
  updatePartnerpage(input: updatePartnerpageInput): updatePartnerpagePayload
  deletePartnerpage(input: deletePartnerpageInput): deletePartnerpagePayload
  createTeammember(input: createTeammemberInput): createTeammemberPayload
  updateTeammember(input: updateTeammemberInput): updateTeammemberPayload
  deleteTeammember(input: deleteTeammemberInput): deleteTeammemberPayload
  createTeampage(input: createTeampageInput): createTeampagePayload
  updateTeampage(input: updateTeampageInput): updateTeampagePayload
  deleteTeampage(input: deleteTeampageInput): deleteTeampagePayload
  createTechnicalpage(input: createTechnicalpageInput): createTechnicalpagePayload
  updateTechnicalpage(input: updateTechnicalpageInput): updateTechnicalpagePayload
  deleteTechnicalpage(input: deleteTechnicalpageInput): deleteTechnicalpagePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Partner {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String
  Website: String
  PartnerType: ENUM_PARTNER_PARTNERTYPE
  Image: UploadFile
}

input PartnerInput {
  Name: String
  Website: String
  PartnerType: ENUM_PARTNER_PARTNERTYPE
  Image: ID
}

type Partnerpage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  NetworkPartnersText: String
  InvestmentPartnersText: String
}

input PartnerpageInput {
  NetworkPartnersText: String
  InvestmentPartnersText: String
}

type Query {
  aboutpage(id: ID!): Aboutpage
  aboutpages(sort: String, limit: Int, start: Int, where: JSON): [Aboutpage]
  contact(id: ID!): Contact
  contacts(sort: String, limit: Int, start: Int, where: JSON): [Contact]
  generalsetting(id: ID!): Generalsettings
  generalsettings(sort: String, limit: Int, start: Int, where: JSON): [Generalsettings]
  goalsandvalue(id: ID!): Goalsandvalue
  goalsandvalues(sort: String, limit: Int, start: Int, where: JSON): [Goalsandvalue]
  grouppage(id: ID!): Grouppage
  grouppages(sort: String, limit: Int, start: Int, where: JSON): [Grouppage]
  homepage(id: ID!): Homepage
  homepages(sort: String, limit: Int, start: Int, where: JSON): [Homepage]
  partner(id: ID!): Partner
  partners(sort: String, limit: Int, start: Int, where: JSON): [Partner]
  partnerpage(id: ID!): Partnerpage
  partnerpages(sort: String, limit: Int, start: Int, where: JSON): [Partnerpage]
  teammember(id: ID!): Teammember
  teammembers(sort: String, limit: Int, start: Int, where: JSON): [Teammember]
  teampage(id: ID!): Teampage
  teampages(sort: String, limit: Int, start: Int, where: JSON): [Teampage]
  technicalpage(id: ID!): Technicalpage
  technicalpages(sort: String, limit: Int, start: Int, where: JSON): [Technicalpage]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Teammember {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Avatar: UploadFile
  Name: String
  Title: String
  LinkedIn: String
  Bio: String
  Team: ENUM_TEAMMEMBER_TEAM
}

input TeammemberInput {
  Avatar: ID
  Name: String
  Title: String
  LinkedIn: String
  Bio: String
  Team: ENUM_TEAMMEMBER_TEAM
}

type Teampage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  BannerImage: UploadFile
}

input TeampageInput {
  BannerImage: ID
}

type Technicalpage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  TermsOfUse: String
  Disclosures: String
}

input TechnicalpageInput {
  TermsOfUse: String
  Disclosures: String
}

input updateAboutpageInput {
  where: InputID
  data: editAboutpageInput
}

type updateAboutpagePayload {
  aboutpage: Aboutpage
}

input updateContactInput {
  where: InputID
  data: editContactInput
}

type updateContactPayload {
  contact: Contact
}

input updateGeneralsettingsInput {
  where: InputID
  data: editGeneralsettingsInput
}

type updateGeneralsettingsPayload {
  generalsetting: Generalsettings
}

input updateGoalsandvalueInput {
  where: InputID
  data: editGoalsandvalueInput
}

type updateGoalsandvaluePayload {
  goalsandvalue: Goalsandvalue
}

input updateGrouppageInput {
  where: InputID
  data: editGrouppageInput
}

type updateGrouppagePayload {
  grouppage: Grouppage
}

input updateHomepageInput {
  where: InputID
  data: editHomepageInput
}

type updateHomepagePayload {
  homepage: Homepage
}

input updatePartnerInput {
  where: InputID
  data: editPartnerInput
}

input updatePartnerpageInput {
  where: InputID
  data: editPartnerpageInput
}

type updatePartnerpagePayload {
  partnerpage: Partnerpage
}

type updatePartnerPayload {
  partner: Partner
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTeammemberInput {
  where: InputID
  data: editTeammemberInput
}

type updateTeammemberPayload {
  teammember: Teammember
}

input updateTeampageInput {
  where: InputID
  data: editTeampageInput
}

type updateTeampagePayload {
  teampage: Teampage
}

input updateTechnicalpageInput {
  where: InputID
  data: editTechnicalpageInput
}

type updateTechnicalpagePayload {
  technicalpage: Technicalpage
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
